//=======================================================================
//================ Lex class support ====================================
//=======================================================================
// 	lexClass:
//		name		= c_CPPString
//		parent		= c_CPP
//		parent:dyn	= c_CPP
//		parent:file = <*.c|*.cpp|*.h|*.inl|*.tli|*.tlh|*.rc|*.rc2>	
//
//		children		= 0
//		children		= class1, class2, ...
//
//		previous:class			=	
//		previous:tag			=	
//		previous:tag:separators	=	
//
//		start:class		= 
//		start:Tag		= '"'
//
//		skip:Tag		= '\"'
//
//		end:class		= //
//		end:Tag			= '"'
//		end:separators	= ' '
//
//		Token:tag		= 'if', 'for', 'while', 'do'
//		Token:start:separators	= 
//		Token:end:separators	= 
//-----------------------------------------------------------------------
//---------------- Attributes -------------------------------------------
//-----------------------------------------------------------------------
//	txt:colorFG	= 0xffc0c0 // color value in hex format. default: black	
//	txt:colorBK	= 0xffc0c0 // color value in hex format. default: white		
//
//	txt:colorSelFG	= 0xffc0c0 // color value in hex format. default: white
//	txt:colorSelBK	= 0xffc0c0 // color value in hex format. default: black
//
//	txt:Bold	= 1 // {1,0} default: 0
//	txt:Italic	= 1 // {1,0} default: 0
//	txt:Underline	= 1 // {1,0} default: 0
//
//	caseSensitive	= 1 // {1,0} default: 0
//
//	Collapsable	= 1 // {1,0} default: 0
//	CollapsedText	= '/*...*/' // quoted string value. default: '[..]'	
//
//	ParseOnScreen	= 1 // {1,0} default: 0
// 	
//-----------------------------------------------------------------------
//* Global attributes ***************************************************
//-----------------------------------------------------------------------
// 	global:FirstParseInSeparateThread	= 1		// {0,1} default=1
// 	global:EditReparceInSeparateThread	= 1		// {0,1} default=1
// 	global:ConfigChangedReparceInSeparateThread= 1 // {0,1} default=1
// 	global:EditReparceTimeout_ms	= 500		// default= 500 ms; time out for start reparse after last key was pressed.
// 	global:MaxBackParseOffset		= 100		// default= 100 chars; maximum back buffer size. Some times parser look back for the text from current position.
// 	global:OnScreenSchCacheLifeTime_sec = 180	// default= 180 sec; -1 and 0 means infinite; time out for on screen parsed pices of text. for memory using optimization.
// 	global:ParserThreadIdleLifeTime_sec = 60	// default=60 sec; -1 and 0 means infinite; time out for existing of parser thread when parser idle (no parse requests).
	
/////////////////////////////////////////////////////////////////////////

//=======================================================================
//================ Variables support ====================================
//=======================================================================
// NON operation - example:   @alpha:not
//
// @alpha	= a-z, A-Z
// @digit	= 0-9
// @HexDdigit	= 0-9, a-f, A-F
// @specs	= "~`!@#$%^&*()_-+=\\|{}[];:'\",.<>/?"
// @EOL		= End Of Line
//---------------------------------------------
// special tags:  '\\', '\'', '\t', '\r', '\n'
/////////////////////////////////////////////////////////////////////////

/// Rust ///	
lexClass: 
	name			= c_Rust	
	parent:file		= <*.rs>	
	caseSensitive		= 1
	DisplayName     		= 'Normal Text'

//:lexClass

lexClass: 	
	name			= c_RustCodeBlock
	parent			= c_Rust, c_RustCodeBlock
	start:tag		= '{'
	end:tag			= '}'
	Collapsable		= 1 
	CollapsedText		= '...'
	DisplayName			= 'Curly Braces'

//:lexClass

lexClass:
	name			= c_RustCommentML	
	parent			= c_Rust, c_RustCodeBlock
	start:tag		='/*'
	end:tag			='*/'
	Collapsable		= 1 
	CollapsedText		= '/**/' 
	txt:colorFG		= 0x00A000
	DisplayName			= 'Rust Comment (Multi-Line)'

//:lexClass

lexClass:	
	name			= c_RustCommentSL
	parent			= c_Rust, c_RustCodeBlock
	start:tag		='//'
	end:tag			= @eol
	txt:colorFG		= 0x00A000
	DisplayName			= 'Rust Comment (Single-Line)'

//:lexClass

lexClass:
	name			= c_RustNumber
	parent			= c_Rust, c_RustCodeBlock
	previous:tag		= @specs, ' ', '\t', @EOL	
	start:tag		= @digit, '.'
	skip:tag		= '.'
	end:separators		= @digit:not
	txt:colorFG		= 0xE00000
	DisplayName			= 'Rust Number'

//:lexClass

lexClass: 	
	name			= c_RustStr1	
	parent			= c_Rust, c_RustCodeBlock
	start:tag		= '\''	
	end:tag			= '\'', @eol
	txt:colorFG		= 0xE00000
	DisplayName			= 'Rust String (Single Quotes)'

//:lexClass

lexClass: 	
	name			= c_RustStr2	
	parent			= c_Rust, c_RustCodeBlock
	start:tag		= '"'	
	end:tag			= '"', @eol
	txt:colorFG		= 0xE00000
	DisplayName			= 'Rust String (Double Quotes)'

//:lexClass

lexClass:
	name			= c_RustCharEscapes
	parent			= c_RustStr1, c_RustStr2			
	token:tag		= '\\'', '\\"', '\\\\'
	txt:colorFG		= 0x00A000
	DisplayName			= 'Rust Character Escapes'

//:lexClass

lexClass:	
	name			= c_RustKeywords
	ParseOnScreen		= 0
	parent			= c_Rust, c_RustCodeBlock
	children		= 0
	txt:colorFG		= 0x0000FF
	DisplayName			= 'Rust Keyword'

	token:tag		= 'as'
	token:tag		= 'break' 
	token:tag		= 'const'
	token:tag		= 'continue' 
	token:tag		= 'crate'  
	token:tag		= 'else' 
	token:tag		= 'enum'
	token:tag		= 'extern' 
	token:tag		= 'false' 
	token:tag		= 'fn' 
	token:tag		= 'for' 
	token:tag		= 'if' 
	token:tag		= 'impl' 
	token:tag		= 'in' 
	token:tag		= 'let' 
	token:tag		= 'loop' 
	token:tag		= 'match'
	token:tag		= 'mod' 
	token:tag		= 'move' 
	token:tag		= 'mut' 
	token:tag		= 'pub' 
	token:tag		= 'ref' 
	token:tag		= 'return' 
	token:tag		= 'self' 
	token:tag		= 'Self' 
	token:tag		= 'static' 
	token:tag		= 'struct' 
	token:tag		= 'super' 
	token:tag		= 'trait' 
	token:tag		= 'true' 
	token:tag		= 'type' 
	token:tag		= 'unsafe' 
	token:tag		= 'use' 
	token:tag		= 'where' 
	token:tag		= 'while' 

	token:tag		= 'async'
	token:tag		= 'await'
	token:tag		= 'dyn'

	token:tag		= 'abstract'
	token:tag		= 'become'
	token:tag		= 'box'
	token:tag		= 'do' 
	token:tag		= 'final' 
	token:tag		= 'macro' 
	token:tag		= 'override' 
	token:tag		= 'priv' 
	token:tag		= 'typeof' 
	token:tag		= 'unsized' 
	token:tag		= 'virtual' 
	token:tag		= 'yield'

	token:tag		= 'try' 

	token:tag		= 'union'
	token:tag		= '\'static'

	token:tag		= 'bool'
	token:tag		= 'char'
	token:tag		= 'f32'
	token:tag		= 'f64'
	token:tag		= 'i8'
	token:tag		= 'i16'
	token:tag		= 'i32'
	token:tag		= 'i64'
	token:tag		= 'i128'
	token:tag		= 'isize'
	token:tag		= 'u8'
	token:tag		= 'u16'
	token:tag		= 'u32'
	token:tag		= 'u64'
	token:tag		= 'u128'
	token:tag		= 'usize'

	token:start:separators	= @specs, ' ', '\t', @EOL
	token:end:separators	= @specs, ' ', '\t', @EOL

//:lexClass

