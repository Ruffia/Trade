//=======================================================================
//================ Lex class support ====================================
//=======================================================================
// 	lexClass:
//		name		= c_CPPString
//		parent		= c_CPP
//		parent:dyn	= c_CPP
//		parent:file = <*.c|*.cpp|*.h|*.inl|*.tli|*.tlh|*.rc|*.rc2>	
//
//		children		= 0
//		children		= class1, class2, ...
//
//		previous:class			=	
//		previous:tag			=	
//		previous:tag:separators	=	
//
//		start:class		= 
//		start:Tag		= '"'
//
//		skip:Tag		= '\"'
//
//		end:class		= //
//		end:Tag			= '"'
//		end:separators	= ' '
//
//		Token:tag		= 'if', 'for', 'while', 'do'
//		Token:start:separators	= 
//		Token:end:separators	= 
//-----------------------------------------------------------------------
//---------------- Attributes -------------------------------------------
//-----------------------------------------------------------------------
//	txt:colorFG	= 0xffc0c0 // color value in hex format. default: black	
//	txt:colorBK	= 0xffc0c0 // color value in hex format. default: white		
//
//	txt:colorSelFG	= 0xffc0c0 // color value in hex format. default: white
//	txt:colorSelBK	= 0xffc0c0 // color value in hex format. default: black
//
//	txt:Bold	= 1 // {1,0} default: 0
//	txt:Italic	= 1 // {1,0} default: 0
//	txt:Underline	= 1 // {1,0} default: 0
//
//	caseSensitive	= 1 // {1,0} default: 0
//
//	Collapsable	= 1 // {1,0} default: 0
//	CollapsedText	= '/*...*/' // quoted string value. default: '[..]'	
//
//	ParseOnScreen	= 1 // {1,0} default: 0
// 	
//-----------------------------------------------------------------------
//* Global attributes ***************************************************
//-----------------------------------------------------------------------
// 	global:FirstParseInSeparateThread	= 1		// {0,1} default=1
// 	global:EditReparceInSeparateThread	= 1		// {0,1} default=1
// 	global:ConfigChangedReparceInSeparateThread= 1 // {0,1} default=1
// 	global:EditReparceTimeout_ms	= 500		// default= 500 ms; time out for start reparse after last key was pressed.
// 	global:MaxBackParseOffset		= 100		// default= 100 chars; maximum back buffer size. Some times parser look back for the text from current position.
// 	global:OnScreenSchCacheLifeTime_sec = 180	// default= 180 sec; -1 and 0 means infinite; time out for on screen parsed pices of text. for memory using optimization.
// 	global:ParserThreadIdleLifeTime_sec = 60	// default=60 sec; -1 and 0 means infinite; time out for existing of parser thread when parser idle (no parse requests).
	
/////////////////////////////////////////////////////////////////////////

//=======================================================================
//================ Variables support ====================================
//=======================================================================
// NON operation - example:   @alpha:not
//
// @alpha	= a-z, A-Z
// @digit	= 0-9
// @HexDdigit	= 0-9, a-f, A-F
// @specs	= "~`!@#$%^&*()_-+=\\|{}[];:'\",.<>/?"
// @EOL		= End Of Line
//---------------------------------------------
// special tags:  '\\', '\'', '\t', '\r', '\n'
/////////////////////////////////////////////////////////////////////////

/// Go ///	
lexClass: 
	name			= c_Go	
	parent:file		= <*.go>	
	caseSensitive		= 1
	DisplayName     	  	= 'Normal Text'

lexClass: 	
	name			= c_GoCodeBlock
	parent			= c_Go, c_GoCodeBlock
	start:tag		= '{'
	end:tag			= '}'
	Collapsable		= 1 
	CollapsedText		= '...'
	DisplayName			= 'Curly Braces'

//:lexClass

lexClass:
	name			= c_GoCommentML	
	parent			= c_Go, c_GoCodeBlock
	start:tag		='/*'
	end:tag			='*/'
	Collapsable		= 1 
	CollapsedText		= '/**/' 
	txt:colorFG		= 0x00A000
	DisplayName			= 'Go Comment (Multi-Line)'

//:lexClass

lexClass:	
	name			= c_GoCommentSL
	parent			= c_Go, c_GoCodeBlock
	start:tag		='//'
	end:tag			= @eol
	txt:colorFG		= 0x00A000
	DisplayName			= 'Go Comment (Single-Line)'

//:lexClass

lexClass:
	name			= c_GoNumber_base16
	parent			= c_Go
	previous:tag		= ' ', '\t', @specs, @EOL	
	start:tag		= '0x', '0X'
	skip:tag		= 'a', 'b', 'c', 'd', 'e', 'f'
	end:separators		= @digit:not
	txt:colorFG		= 0xE00000
	CaseSensitive		= 0
	DisplayName			= 'Go Number (Hex)'

//:lexClass

lexClass:
	name			= c_GoNumber_base8
	parent			= c_Go
	previous:tag		= ' ', '\t', @specs, @EOL	
	start:tag		= '0o', '0O'
	end:separators		= @digit:not, '8', '9'
	txt:colorFG		= 0xE00000
	CaseSensitive		= 0
	DisplayName			= 'Go Number (Octal)'

//:lexClass

lexClass:
	name			= c_GoNumber_base2
	parent			= c_Go
	previous:tag		= ' ', '\t', @specs, @EOL	
	start:tag		= '0b', '0B'
	skip:tag		= '0', '1'
	end:separators		= @digit, @digit:not
	txt:colorFG		= 0xE00000
	DisplayName			= 'Go Number (Binary)'

//:lexClass

lexClass:
	name			= c_GoNumber
	parent			= c_Go, c_GoCodeBlock
	previous:tag		= @specs, ' ', '\t', @EOL	
	start:tag		= @digit, '.'
	skip:tag		= '.', 'e', 'E', 'i', '+', '-'
	end:separators		= @digit:not
	txt:colorFG		= 0xE00000
	DisplayName			= 'Go Number'

//:lexClass

lexClass: 	
	name			= c_GoStrML	
	parent			= c_Go, c_GoCodeBlock
	start:tag		= '`'	
	end:tag			= '`'
	txt:colorFG		= 0xE00000
	DisplayName			= 'Go String (Multi-Line)'

//:lexClass

lexClass: 	
	name			= c_GoStr1	
	parent			= c_Go, c_GoCodeBlock
	start:tag		= '\''	
	end:tag			= '\'', @eol
	txt:colorFG		= 0xE00000
	DisplayName			= 'Go String (Single Quotes) (Single-Line)'

//:lexClass

lexClass: 	
	name			= c_GoStr2	
	parent			= c_Go, c_GoCodeBlock
	start:tag		= '"'	
	end:tag			= '"', @eol
	txt:colorFG		= 0xE00000
	DisplayName			= 'Go String (Double Quotes) (Single-Line)'

//:lexClass

lexClass:
	name			= c_GoCharEscapes_regular
	parent			= c_GoStr1, c_GoStr2			
	token:tag		= '\\a', '\\b', '\\f', '\\n', '\\r', '\\t', '\\v', '\\'', '\\"', '\\\\'
	txt:colorFG		= 0x00A000
	DisplayName			= 'Go Character Escapes (Regular)'

//:lexClasss

lexClass:
	name			= c_GoCharEscapes_base16
	parent			= c_GoStr1, c_GoStr2				
	start:tag		= '\\x', '\\u','\\U'
	skip:tag		= 'a', 'b', 'c', 'd', 'e', 'f'
	end:separators		= @digit:not
	txt:colorFG		= 0x00A000
	CaseSensitive		= 0
	DisplayName			= 'Go Character Escapes (Hex)'

//:lexClass

lexClass:
	name			= c_GoCharEscapes_base8
	parent			= c_GoStr1, c_GoStr2				
	start:tag		= '\\'
	end:separators		= @digit:not, '8', '9'
	txt:colorFG		= 0x00A000
	DisplayName			= 'Go Character Escapes (Octal)'

//:lexClass

lexClass:
	name			= c_GoStrFormatSpecifiers1
	parent			= c_GoStr2
	token:tag		= '%%', '%b', '%e', '%g', '%o', '%O'
	token:tag		= '%q', '%t', '%T', '%v', '%#v'
	token:tag		= '%x', '% x', '%X', '%#x'
	txt:colorFG		= 0x00A000
	DisplayName			= 'Go String Format Specifiers'

//:lexClass

lexClass:
	name			= c_GoStrFormatSpecifiers2
	parent			= c_GoStr2
	start:tag		= '%'
	skip:tag		= @digit, '.', '+', '-', 'd', 'f', 's'
	end:separators		= @alpha, @alpha:not
	txt:colorFG		= 0x00A000
	DisplayName			= 'Go String Format Specifiers'

//:lexClass

lexClass:	
	name			= c_GoKeywords
	ParseOnScreen		= 0
	parent			= c_Go, c_GoCodeBlock
	children		= 0
	txt:colorFG		= 0x0000FF
	DisplayName			= 'Go Keyword'

	token:tag		= 'break'
	token:tag		= 'case'
	token:tag		= 'chan' 
	token:tag		= 'const' 
	token:tag		= 'continue' 
	token:tag		= 'default' 
	token:tag		= 'defer' 
	token:tag		= 'else' 
	token:tag		= 'fallthrough' 
	token:tag		= 'for' 
	token:tag		= 'func' 
	token:tag		= 'go' 
	token:tag		= 'goto' 
	token:tag		= 'if' 
	token:tag		= 'import' 
	token:tag		= 'interface' 
	token:tag		= 'map' 
	token:tag		= 'package' 
	token:tag		= 'range' 
	token:tag		= 'return' 
	token:tag		= 'select' 
	token:tag		= 'struct' 
	token:tag		= 'switch' 
	token:tag		= 'type' 
	token:tag		= 'var'

	token:tag		= 'true'
	token:tag		= 'false'
	token:tag		= 'nil'

	token:tag		= 'bool'
	token:tag		= 'float32'
	token:tag		= 'int'
	token:tag		= 'string'

	token:start:separators	= @specs, ' ', '\t', @EOL
	token:end:separators	= @specs, ' ', '\t', @EOL

//:lexClass

lexClass:
	name			= c_GoVariable
	parent			= c_Go, c_GoCodeBlock
	start:Tag		= @alpha, '_'
	skip:Tag		= @digit, '_'
	end:separators		= @alpha:not
	txt:colorFG		= 0x000000
	DisplayName			= 'Go Variable'

//:lexClass

