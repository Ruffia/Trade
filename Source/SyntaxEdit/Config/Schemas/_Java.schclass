//=======================================================================
//================ Lex class support ====================================
//=======================================================================
// 	lexClass:
//		name		= c_CPPString
//		parent		= c_CPP
//		parent:dyn	= c_CPP
//		parent:file = <*.c|*.cpp|*.h|*.inl|*.tli|*.tlh|*.rc|*.rc2>	
//
//		children		= 0
//		children		= class1, class2, ...
//
//		previous:class			=	
//		previous:tag			=	
//		previous:tag:separators	=	
//
//		start:class		= 
//		start:Tag		= '"'
//
//		skip:Tag		= '\"'
//
//		end:class		= //
//		end:Tag			= '"'
//		end:separators	= ' '
//
//		Token:tag		= 'if', 'for', 'while', 'do'
//		Token:start:separators	= 
//		Token:end:separators	= 
//-----------------------------------------------------------------------
//---------------- Attributes -------------------------------------------
//-----------------------------------------------------------------------
//	txt:colorFG	= 0xffc0c0 // color value in hex format. default: black	
//	txt:colorBK	= 0xffc0c0 // color value in hex format. default: white		
//
//	txt:colorSelFG	= 0xffc0c0 // color value in hex format. default: white
//	txt:colorSelBK	= 0xffc0c0 // color value in hex format. default: black
//
//	txt:Bold	= 1 // {1,0} default: 0
//	txt:Italic	= 1 // {1,0} default: 0
//	txt:Underline	= 1 // {1,0} default: 0
//
//	caseSensitive	= 1 // {1,0} default: 0
//
//	Collapsable	= 1 // {1,0} default: 0
//	CollapsedText	= '/*...*/' // quoted string value. default: '[..]'	
//
//	ParseOnScreen	= 1 // {1,0} default: 0
// 	
//-----------------------------------------------------------------------
//* Global attributes ***************************************************
//-----------------------------------------------------------------------
// 	global:FirstParseInSeparateThread	= 1		// {0,1} default=1
// 	global:EditReparceInSeparateThread	= 1		// {0,1} default=1
// 	global:ConfigChangedReparceInSeparateThread= 1 // {0,1} default=1
// 	global:EditReparceTimeout_ms	= 500		// default= 500 ms; time out for start reparse after last key was pressed.
// 	global:MaxBackParseOffset		= 100		// default= 100 chars; maximum back buffer size. Some times parser look back for the text from current position.
// 	global:OnScreenSchCacheLifeTime_sec = 180	// default= 180 sec; -1 and 0 means infinite; time out for on screen parsed pices of text. for memory using optimization.
// 	global:ParserThreadIdleLifeTime_sec = 60	// default=60 sec; -1 and 0 means infinite; time out for existing of parser thread when parser idle (no parse requests).
	
/////////////////////////////////////////////////////////////////////////

//=======================================================================
//================ Variables support ====================================
//=======================================================================
// NON operation - example:   @alpha:not
//
// @alpha	= a-z, A-Z
// @digit	= 0-9
// @HexDdigit	= 0-9, a-f, A-F
// @specs	= "~`!@#$%^&*()_-+=\\|{}[];:'\",.<>/?"
// @EOL		= End Of Line
//---------------------------------------------
// special tags:  '\\', '\'', '\t', '\r', '\n'
/////////////////////////////////////////////////////////////////////////

/// Java ///	
lexClass: 
	name			= c_Java	
	parent:file		= <*.java>	
	caseSensitive		= 1
	DisplayName    		 	= 'Normal Text'

	//global:FirstParseInSeparateThread	= 0
	global:EditReparceInSeparateThread	= 1

	//global:EditReparceTimeout_ms		= 250
	//global:MaxBackParseOffset		= 100
	//global:OnScreenSchCacheLifeTime_sec 	= 60
	//global:ParserThreadIdleLifeTime_sec 	= -1

//:lexClass

lexClass: 	
	name			= c_JavaCodeBlock
	parent			= c_Java, c_JavaCodeBlock
	start:tag		= '{'
	end:tag			= '}'
	Collapsable		= 1 
	CollapsedText		= '...'
	DisplayName			= 'Curly Braces'

//:lexClass

lexClass:
	name			= c_JavaCommentML	
	parent			= c_Java, c_JavaCodeBlock
	start:tag		='/*'
	end:tag			='*/'
	Collapsable		= 1 
	CollapsedText		= '/**/' 
	txt:colorFG		= 0x00A000
	DisplayName			= 'Java Comment (Multi-Line)'

//:lexClass

lexClass:	
	name			= c_JavaCommentSL
	parent			= c_Java, c_JavaCodeBlock
	start:tag		='//'
	end:tag			= @eol
	txt:colorFG		= 0x00A000
	DisplayName			= 'Java Comment (Single-Line)'

//:lexClass

lexClass:
	name			= c_JavaNumber
	parent			= c_Java, c_JavaCodeBlock
	previous:tag		= @specs, ' ', '\t', @EOL	
	start:tag		= @digit
	skip:tag		= '.', 'e', 'E', 'L', 'f', 'd'
	end:separators		= @digit:not
	txt:colorFG		= 0xE00000
	DisplayName			= 'Java Number'

//:lexClass

lexClass: 	
	name			= c_JavaStrML	
	parent			= c_Java, c_JavaCodeBlock
	start:tag		= '"""'	
	end:tag			= '"""'
	txt:colorFG		= 0xE00000
	DisplayName			= 'Java String (Double Quotes) (Multi-Line)'

//:lexClass

lexClass: 	
	name			= c_JavaStr1	
	parent			= c_Java, c_JavaCodeBlock
	start:tag		= '\''	
	end:tag			= '\'', @eol
	txt:colorFG		= 0xE00000
	DisplayName			= 'Java String (Single Quotes) (Single-Line)'

//:lexClass

lexClass: 	
	name			= c_JavaStr2
	parent			= c_Java, c_JavaCodeBlock
	start:tag		= '"'	
	end:tag			= '"', @eol
	txt:colorFG		= 0xE00000
	DisplayName			= 'Java String (Double Quotes) (Single-Line)'

//:lexClass

lexClass:
	name			= c_JavaCharEscapes
	parent			= c_JavaStr1, c_JavaStr2, c_JavaStrML			
	token:tag		= '\\n', '\\r', '\\f', '\\'', '\\"', '\\t', '\\b', '\\\\'
	txt:colorFG		= 0x00A000
	DisplayName			= 'Java Character Escapes'

//:lexClass

lexClass:
	name			= c_JavaStrFormatSpecifiers1
	parent			= c_JavaStr2, c_JavaStrML
	token:tag		= '%a', '%b', '%c', '%d', '%e', '%f', '%g', '%h', '%n', '%o', '%s', '%t', '%x'
	txt:colorFG		= 0x00A000
	DisplayName			= 'Java String Format Specifiers'

//:lexClass

lexClass:
	name			= c_JavaStrFormatSpecifiers2
	parent			= c_JavaStr2, c_JavaStrML
	start:tag		= '|%'		
	end:tag			= 'a|', 'b|', 'c|', 'd|', 'e|', 'f|', 'g|', 'h|', 'n|', 'o|', 's|', 't|', 'x|'
	txt:colorFG		= 0x00A000
	DisplayName			= 'Java String Format Specifiers'

//:lexClass

lexClass:	
	name			= c_JavaKeywords
	ParseOnScreen		= 0
	parent			= c_Java, c_JavaCodeBlock
	children		= 0
	txt:colorFG		= 0x0000FF
	DisplayName			= 'Java Keyword'

	token:tag		= 'abstract'
	token:tag		= 'assert'
	token:tag		= 'boolean'
	token:tag		= 'break'
	token:tag		= 'byte'
	token:tag		= 'case'
	token:tag		= 'catch'
	token:tag		= 'char'
	token:tag		= 'class'
	token:tag		= 'const'
	token:tag		= 'continue'
	token:tag		= 'default'
	token:tag		= 'do'
	token:tag		= 'double'
	token:tag		= 'else'
	token:tag		= 'enum'
	token:tag		= 'exports'
	token:tag		= 'extends'
	token:tag		= 'false'
	token:tag		= 'final'
	token:tag		= 'finally'
	token:tag		= 'float'
	token:tag		= 'for'
	token:tag		= 'goto'
	token:tag		= 'if'
	token:tag		= 'implements'
	token:tag		= 'import'
	token:tag		= 'instanceof'
	token:tag		= 'int'
	token:tag		= 'interface'
	token:tag		= 'long'
	token:tag		= 'module'
	token:tag		= 'native'
	token:tag		= 'new'
	token:tag		= 'null'
	token:tag		= 'package'
	token:tag		= 'private'
	token:tag		= 'protected'
	token:tag		= 'public'
	token:tag		= 'requires'
	token:tag		= 'return'
	token:tag		= 'short'
	token:tag		= 'static'
	token:tag		= 'strictfp'
	token:tag		= 'super'
	token:tag		= 'switch'
	token:tag		= 'synchronized'
	token:tag		= 'this'
	token:tag		= 'throw'
	token:tag		= 'throws'
	token:tag		= 'transient'
	token:tag		= 'true'
	token:tag		= 'try'
	token:tag		= 'var'
	token:tag		= 'void'
	token:tag		= 'volatile'
	token:tag		= 'while'

	token:start:separators	= @specs, ' ', '\t', @EOL
	token:end:separators	= @specs, ' ', '\t', @EOL

//:lexClass

